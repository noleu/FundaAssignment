name: Build, Test, and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main"]
  release:
    types: [ published ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/TestResults/**/*.xml'

  package-and-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    strategy:
      matrix:
        os: [win-x64, linux-x64, osx-x64]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Publish ${{ matrix.os }}
      run: |
        dotnet publish FundaAssignment/FundaAssignment.csproj \
          --configuration Release \
          --runtime ${{ matrix.os }} \
          --self-contained true \
          --output ./publish/${{ matrix.os }} \
          -p:PublishSingleFile=true \
          -p:IncludeNativeLibrariesForSelfExtract=true
          
    - name: Create archive
      run: |
        cd ./publish/${{ matrix.os }}
        if [[ "${{ matrix.os }}" == "win-x64" ]]; then
          zip -r ../../FundaAssignment-${{ matrix.os }}.zip .
        else
          tar -czf ../../FundaAssignment-${{ matrix.os }}.tar.gz .
        fi
        
    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./FundaAssignment-${{ matrix.os }}.${{ matrix.os == 'win-x64' && 'zip' || 'tar.gz' }}
        asset_name: FundaAssignment-${{ matrix.os }}.${{ matrix.os == 'win-x64' && 'zip' || 'tar.gz' }}
        asset_content_type: ${{ matrix.os == 'win-x64' && 'application/zip' || 'application/gzip' }}

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./FundaAssignment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
